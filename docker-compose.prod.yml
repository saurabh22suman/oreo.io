services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: oreo-postgres-prod
    environment:
      POSTGRES_DB: ${PROD_DB_NAME}
      POSTGRES_USER: ${PROD_DB_USER}
      POSTGRES_PASSWORD: ${PROD_DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d:ro
      - ./backup:/backup
    networks:
      - oreo-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PROD_DB_USER} -d ${PROD_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: oreo-redis-prod
    command: redis-server --appendonly yes --requirepass ${PROD_REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    networks:
      - oreo-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${PROD_REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API (with multiple replicas for load balancing)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - PORT=8080
      - ENVIRONMENT=production
      - USE_MOCK_DB=false
      - USE_MOCK_REDIS=false
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${PROD_DB_USER}
      - DATABASE_PASSWORD=${PROD_DB_PASSWORD}
      - DATABASE_NAME=${PROD_DB_NAME}
      - DATABASE_URL=postgres://${PROD_DB_USER}:${PROD_DB_PASSWORD}@postgres:5432/${PROD_DB_NAME}?sslmode=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${PROD_REDIS_PASSWORD}
      - REDIS_URL=redis://:${PROD_REDIS_PASSWORD}@redis:6379/0
      - JWT_SECRET=${PROD_JWT_SECRET}
      - JWT_ACCESS_EXPIRY=15m
      - JWT_REFRESH_EXPIRY=168h
      - FRONTEND_URL=https://app.soloengine.in
      - RATE_LIMIT_REQUESTS=30
      - RATE_LIMIT_WINDOW=1m
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - oreo-network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: any

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - VITE_API_URL=https://api.soloengine.in/prod
      - VITE_ENVIRONMENT=production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - oreo-network
    restart: always

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: oreo-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - frontend
      - backend
    networks:
      - oreo-network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  oreo-network:
    driver: bridge
